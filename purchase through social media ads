{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#                                Classification of Social Media Ads"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The aim of this project is to analyse the ads we come across the social media for classifying if the audience will buy the product or not. \n",
    "This helps to find the customers who are more likely to buy the product based on their age and income\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The dataset I am using for the task of Social Media Ads Classification is downloaded from Kaggle. It contains data about a product’s social media advertising campaign. It contains features like:\n",
    "\n",
    "1. The age of the target audience\n",
    "2. The estimated salary of the target audience\n",
    "3. Gender\n",
    "4. Whether the target audience has purchased the product or not"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's import the required python libraries to start the project"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import confusion_matrix \n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.naive_bayes import GaussianNB\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.metrics import accuracy_score\n",
    "from sklearn.metrics import precision_score, recall_score\n",
    "from sklearn.metrics import classification_report"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's import the dataset and read it as pandas dataframe"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>User ID</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Age</th>\n",
       "      <th>EstimatedSalary</th>\n",
       "      <th>Purchased</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>15624510</td>\n",
       "      <td>Male</td>\n",
       "      <td>19</td>\n",
       "      <td>19000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>15810944</td>\n",
       "      <td>Male</td>\n",
       "      <td>35</td>\n",
       "      <td>20000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>15668575</td>\n",
       "      <td>Female</td>\n",
       "      <td>26</td>\n",
       "      <td>43000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>15603246</td>\n",
       "      <td>Female</td>\n",
       "      <td>27</td>\n",
       "      <td>57000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>15804002</td>\n",
       "      <td>Male</td>\n",
       "      <td>19</td>\n",
       "      <td>76000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    User ID  Gender  Age  EstimatedSalary  Purchased\n",
       "0  15624510    Male   19            19000          0\n",
       "1  15810944    Male   35            20000          0\n",
       "2  15668575  Female   26            43000          0\n",
       "3  15603246  Female   27            57000          0\n",
       "4  15804002    Male   19            76000          0"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data = pd.read_csv(\"Social_Network_Ads.csv\")\n",
    "data.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data Preprocessing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 400 entries, 0 to 399\n",
      "Data columns (total 5 columns):\n",
      " #   Column           Non-Null Count  Dtype \n",
      "---  ------           --------------  ----- \n",
      " 0   User ID          400 non-null    int64 \n",
      " 1   Gender           400 non-null    object\n",
      " 2   Age              400 non-null    int64 \n",
      " 3   EstimatedSalary  400 non-null    int64 \n",
      " 4   Purchased        400 non-null    int64 \n",
      "dtypes: int64(4), object(1)\n",
      "memory usage: 15.8+ KB\n"
     ]
    }
   ],
   "source": [
    "data.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The dataset contains 400 rows and 5 columns.\n",
    "\n",
    "Here, for our task, the User ID column is not useful. Hence we can drop that column"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "data.drop('User ID', inplace=True, axis = 1)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now let’s take a look at some of the insights from the data to see if we need to make any changes to the dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Age</th>\n",
       "      <th>EstimatedSalary</th>\n",
       "      <th>Purchased</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>400.000000</td>\n",
       "      <td>400.000000</td>\n",
       "      <td>400.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>37.655000</td>\n",
       "      <td>69742.500000</td>\n",
       "      <td>0.357500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>10.482877</td>\n",
       "      <td>34096.960282</td>\n",
       "      <td>0.479864</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>18.000000</td>\n",
       "      <td>15000.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>29.750000</td>\n",
       "      <td>43000.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>37.000000</td>\n",
       "      <td>70000.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>46.000000</td>\n",
       "      <td>88000.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>60.000000</td>\n",
       "      <td>150000.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              Age  EstimatedSalary   Purchased\n",
       "count  400.000000       400.000000  400.000000\n",
       "mean    37.655000     69742.500000    0.357500\n",
       "std     10.482877     34096.960282    0.479864\n",
       "min     18.000000     15000.000000    0.000000\n",
       "25%     29.750000     43000.000000    0.000000\n",
       "50%     37.000000     70000.000000    0.000000\n",
       "75%     46.000000     88000.000000    1.000000\n",
       "max     60.000000    150000.000000    1.000000"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As we can see, the data contains details of audience of age 18 - 60. As this is the legal working age, there is no problem with this age group.\n",
    "\n",
    "Also, in the data collected, least salary is 15,000 and highest salary is 1,50,000. Hence our dataset has audience with large range of the salary. \n",
    "\n",
    "And the last column tells whether the person has purchased the product or not."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let us check if there are any NaN values in our dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Gender             0\n",
       "Age                0\n",
       "EstimatedSalary    0\n",
       "Purchased          0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.isnull().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Luckily, there are no NaN values. Hence this has reduced our work because if there are any NaN values, we need to replace them with either mean,mode,median or drop those rows based on the data."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exploring the data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's draw a pie-chart to see the distribution of audience who have purchased and who haven't."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:ylabel='Purchased'>"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "data['Purchased'].value_counts().plot.pie(autopct = '%1.1f%%', shadow= True, figsize = (6, 8), explode = [0, 0.06])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From the pie chart it is clear that only around 36% of audience who watched the ads have purchased. But yet it is a good number because turning out 36% of social media users ( who just open social media without any intention of buying) to buy the products is a good achievement."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's find the number of male and female in our data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Female    204\n",
       "Male      196\n",
       "Name: Gender, dtype: int64"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data['Gender'].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Representing this in a form of Pie-Chart"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:ylabel='Gender'>"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "data['Gender'].value_counts().plot.pie(autopct = '%1.1f%%', shadow= True, figsize = (6, 8))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's see the numeber of male and female who have purchased the product"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Purchased</th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Gender</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Female</th>\n",
       "      <td>127</td>\n",
       "      <td>77</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Male</th>\n",
       "      <td>130</td>\n",
       "      <td>66</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Purchased    0   1\n",
       "Gender            \n",
       "Female     127  77\n",
       "Male       130  66"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.crosstab(data.Gender,data.Purchased)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Visualising this with bar Chart"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(x='Purchased', data=data, hue='Gender')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Around 61% of women, who have watched the ads in social media, have purchased those products\n",
    "Coming to men, around 51% who have watched these ads, have purchased."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "let's see the salary distribution among the audience covered in our dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:ylabel='Frequency'>"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x504 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10, 7))\n",
    "data['EstimatedSalary'].plot(kind='hist')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can see that most number of people have their income around 80K. There are less number of people who have an income of greater than 1 Lakh."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's see the role of income in purchasing the product"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(15, 10))\n",
    "plt.title(\"Product Purchased By People According to Their Income\")\n",
    "sns.histplot(x=\"EstimatedSalary\", hue=\"Purchased\", data=data)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It is clear that the percentage of people, who buy product, is very high among those with higher income. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's see if Age plays any role"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(15, 10))\n",
    "plt.title(\"Product Purchased By People according to their age\")\n",
    "sns.histplot(x=\"Age\", hue=\"Purchased\", data=data)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Those greater than 40 years are the major ones who purchased the products. This could be because, the young people usually tend to save their income and also have more expenses than the older ones. Hence one can target more on people of age > 40 through these social media ads."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's make a scatterplot to find the relation between these columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Age', ylabel='EstimatedSalary'>"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.scatterplot('Age', 'EstimatedSalary', data = data, hue = 'Purchased')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This is in accordance with the analysis done earlier. \n",
    "\n",
    "Let's find the correlation between these variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Age</th>\n",
       "      <th>EstimatedSalary</th>\n",
       "      <th>Purchased</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>400.000000</td>\n",
       "      <td>400.000000</td>\n",
       "      <td>400.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>37.655000</td>\n",
       "      <td>69742.500000</td>\n",
       "      <td>0.357500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>10.482877</td>\n",
       "      <td>34096.960282</td>\n",
       "      <td>0.479864</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>18.000000</td>\n",
       "      <td>15000.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>29.750000</td>\n",
       "      <td>43000.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>37.000000</td>\n",
       "      <td>70000.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>46.000000</td>\n",
       "      <td>88000.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>60.000000</td>\n",
       "      <td>150000.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              Age  EstimatedSalary   Purchased\n",
       "count  400.000000       400.000000  400.000000\n",
       "mean    37.655000     69742.500000    0.357500\n",
       "std     10.482877     34096.960282    0.479864\n",
       "min     18.000000     15000.000000    0.000000\n",
       "25%     29.750000     43000.000000    0.000000\n",
       "50%     37.000000     70000.000000    0.000000\n",
       "75%     46.000000     88000.000000    1.000000\n",
       "max     60.000000    150000.000000    1.000000"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.heatmap(data.corr(), annot=True)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Number of people who purchased has a correlation of 0.62 which implies it is proportional to age.\n",
    "Also salary of people plays a role."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The Gender column now has no use as it has no (very less) effect on purchased. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "data.drop('Gender', inplace=True, axis = 1)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Age</th>\n",
       "      <th>EstimatedSalary</th>\n",
       "      <th>Purchased</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>400.000000</td>\n",
       "      <td>400.000000</td>\n",
       "      <td>400.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>37.655000</td>\n",
       "      <td>69742.500000</td>\n",
       "      <td>0.357500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>10.482877</td>\n",
       "      <td>34096.960282</td>\n",
       "      <td>0.479864</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>18.000000</td>\n",
       "      <td>15000.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>29.750000</td>\n",
       "      <td>43000.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>37.000000</td>\n",
       "      <td>70000.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>46.000000</td>\n",
       "      <td>88000.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>60.000000</td>\n",
       "      <td>150000.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              Age  EstimatedSalary   Purchased\n",
       "count  400.000000       400.000000  400.000000\n",
       "mean    37.655000     69742.500000    0.357500\n",
       "std     10.482877     34096.960282    0.479864\n",
       "min     18.000000     15000.000000    0.000000\n",
       "25%     29.750000     43000.000000    0.000000\n",
       "50%     37.000000     70000.000000    0.000000\n",
       "75%     46.000000     88000.000000    1.000000\n",
       "max     60.000000    150000.000000    1.000000"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Training the model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The column \"Purchased\" is dependent and the columns \"Age\" and \"EstimtedSalary\" are independent"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = data.drop(columns = ['Purchased'])\n",
    "y = data['Purchased']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "let's check if our input and target variables are correct"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Age</th>\n",
       "      <th>EstimatedSalary</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>19</td>\n",
       "      <td>19000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>35</td>\n",
       "      <td>20000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>26</td>\n",
       "      <td>43000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>27</td>\n",
       "      <td>57000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>19</td>\n",
       "      <td>76000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>395</th>\n",
       "      <td>46</td>\n",
       "      <td>41000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>396</th>\n",
       "      <td>51</td>\n",
       "      <td>23000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>397</th>\n",
       "      <td>50</td>\n",
       "      <td>20000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>398</th>\n",
       "      <td>36</td>\n",
       "      <td>33000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>399</th>\n",
       "      <td>49</td>\n",
       "      <td>36000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>400 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Age  EstimatedSalary\n",
       "0     19            19000\n",
       "1     35            20000\n",
       "2     26            43000\n",
       "3     27            57000\n",
       "4     19            76000\n",
       "..   ...              ...\n",
       "395   46            41000\n",
       "396   51            23000\n",
       "397   50            20000\n",
       "398   36            33000\n",
       "399   49            36000\n",
       "\n",
       "[400 rows x 2 columns]"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x #input variable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0      0\n",
       "1      0\n",
       "2      0\n",
       "3      0\n",
       "4      0\n",
       "      ..\n",
       "395    1\n",
       "396    1\n",
       "397    1\n",
       "398    0\n",
       "399    1\n",
       "Name: Purchased, Length: 400, dtype: int64"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y #target variable"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Scaling"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Values of EstimatedSalary column are very high and hence they may dominate. So, let us scale the values of both the input columns."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "scaling_columns=['Age','EstimatedSalary']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Age</th>\n",
       "      <th>EstimatedSalary</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>18.0</td>\n",
       "      <td>15000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>60.0</td>\n",
       "      <td>150000.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Age  EstimatedSalary\n",
       "min  18.0          15000.0\n",
       "max  60.0         150000.0"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x[scaling_columns].describe().loc[['min', 'max']]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Initially, the range of these values is very large before scaling. Let's scale them between 0 and 1."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import MinMaxScaler\n",
    "scaler = MinMaxScaler()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "MinMaxScaler()"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "scaler.fit(x[scaling_columns])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.0952381 , 0.07407407]])"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "newarr=np.array([22,25000]).reshape(1,2)\n",
    "newarr=scaler.transform(newarr)\n",
    "newarr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "x[scaling_columns] = scaler.transform(x[scaling_columns])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Age</th>\n",
       "      <th>EstimatedSalary</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Age  EstimatedSalary\n",
       "min  0.0              0.0\n",
       "max  1.0              1.0"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x.describe().loc[['min', 'max']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Age</th>\n",
       "      <th>EstimatedSalary</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.023810</td>\n",
       "      <td>0.029630</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.404762</td>\n",
       "      <td>0.037037</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.190476</td>\n",
       "      <td>0.207407</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.214286</td>\n",
       "      <td>0.311111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.023810</td>\n",
       "      <td>0.451852</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>395</th>\n",
       "      <td>0.666667</td>\n",
       "      <td>0.192593</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>396</th>\n",
       "      <td>0.785714</td>\n",
       "      <td>0.059259</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>397</th>\n",
       "      <td>0.761905</td>\n",
       "      <td>0.037037</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>398</th>\n",
       "      <td>0.428571</td>\n",
       "      <td>0.133333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>399</th>\n",
       "      <td>0.738095</td>\n",
       "      <td>0.155556</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>400 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          Age  EstimatedSalary\n",
       "0    0.023810         0.029630\n",
       "1    0.404762         0.037037\n",
       "2    0.190476         0.207407\n",
       "3    0.214286         0.311111\n",
       "4    0.023810         0.451852\n",
       "..        ...              ...\n",
       "395  0.666667         0.192593\n",
       "396  0.785714         0.059259\n",
       "397  0.761905         0.037037\n",
       "398  0.428571         0.133333\n",
       "399  0.738095         0.155556\n",
       "\n",
       "[400 rows x 2 columns]"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As we can see now the values in both the columns are between 0 and 1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now, let's split our dataset into train and test data. As our dataset is small, we limit our test data to 10% of total data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [],
   "source": [
    "xtrain, xtest, ytrain, ytest = train_test_split(x, y, \n",
    "                                                test_size=0.10, \n",
    "                                                random_state=10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now, let's use the following Machine Learning algorithms to classify and then compare their accuracy at the end."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 1. Logistic Regression\n",
    "#### 2. Decision Tree Classifier\n",
    "#### 3. Random Forest Algorithm\n",
    "#### 4. Support Vector Machine Algorithm\n",
    "#### 5. K-NN Algorithm\n",
    "#### 6. Naive-Bayes Classifier"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's initilize empty lists to store our models and respective accuracy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [],
   "source": [
    "model_list = []\n",
    "score_list = []"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### LOGISTIC REGRESSION"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LogisticRegression()"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model1 = LogisticRegression()\n",
    "model1.fit(xtrain, ytrain)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model : Logistics Regression\n",
      "Accuracy : 0.93\n",
      "Recall_Score : 0.79\n",
      "precission_Score : 1.00\n"
     ]
    }
   ],
   "source": [
    "score1 = accuracy_score(ytest, model1.predict(xtest))\n",
    "print(\"Model : Logistics Regression\")\n",
    "print('Accuracy : {:0.2f}'.format(score1))\n",
    "model_list.append('Logistic_Regression')\n",
    "score_list.append(score1)\n",
    "print('Recall_Score : {:0.2f}'.format(recall_score(ytest, model1.predict(xtest))))\n",
    "print('precission_Score : {:0.2f}'.format(precision_score(ytest, model1.predict(xtest))))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 87,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "cm= confusion_matrix(ytest, model1.predict(xtest)) \n",
    "sns.heatmap(cm, annot=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can see that 3 out of 40 are predicted wrong using logistic regression "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### DECISION TREE CLASSIFIER"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DecisionTreeClassifier()"
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model2 = DecisionTreeClassifier()\n",
    "model2.fit(xtrain, ytrain)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model : DecisionTreeClassifier \n",
      "Accuracy : 0.85\n",
      "Recall_Score : 0.79\n",
      "precission_Score : 0.79\n"
     ]
    }
   ],
   "source": [
    "score2 = accuracy_score(ytest, model2.predict(xtest))\n",
    "print(\"Model : DecisionTreeClassifier \")\n",
    "print('Accuracy : {:0.2f}'.format(score2))\n",
    "model_list.append('DecisionTreeClassifier')\n",
    "score_list.append(score2)\n",
    "print('Recall_Score : {:0.2f}'.format(recall_score(ytest, model2.predict(xtest))))\n",
    "print('precission_Score : {:0.2f}'.format(precision_score(ytest, model2.predict(xtest))))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 91,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "cm= confusion_matrix(ytest, model2.predict(xtest)) \n",
    "sns.heatmap(cm, annot=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "6 out of 40 are predicted wrong using DecisionTreeClassifier"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### RANDOM FOREST"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RandomForestClassifier()"
      ]
     },
     "execution_count": 92,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model3=RandomForestClassifier()\n",
    "model3.fit(xtrain,ytrain)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model : RandomForestClassifier \n",
      "Accuracy : 0.90\n",
      "Recall_Score : 0.93\n",
      "precission_Score : 0.81\n"
     ]
    }
   ],
   "source": [
    "score3 = accuracy_score(ytest, model3.predict(xtest))\n",
    "print(\"Model : RandomForestClassifier \")\n",
    "print('Accuracy : {:0.2f}'.format(score3))\n",
    "model_list.append('RandomForestClassifier')\n",
    "score_list.append(score3)\n",
    "print('Recall_Score : {:0.2f}'.format(recall_score(ytest, model3.predict(xtest))))\n",
    "print('precission_Score : {:0.2f}'.format(precision_score(ytest, model3.predict(xtest))))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 94,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAWQAAAD4CAYAAADbyJysAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjMuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8vihELAAAACXBIWXMAAAsTAAALEwEAmpwYAAAVZ0lEQVR4nO3dfZRV1XnH8e+PNxPB1BcE5aVILNGgVcwiRENjQSNFfMGmrhSSGpLYjqbaaGpbjbbmfcWuqK0RGzsRqkaFmCpRIyKUmqWmakSKCQYNL8E4DgERFQS6dOY+/WMOrOt45947w2Xuvoffh7XXnLPPy36Wa9Yz2332OVsRgZmZ1V+fegdgZmYdnJDNzBLhhGxmlggnZDOzRDghm5klot/ebuDtzes8jcPe5eijz613CJagtZuXa0/v0Z2c03/w+/e4vVpyD9nMLBF7vYdsZtarCu01uY2kkcDtwGFAAWiOiBskfQc4C3gLWAt8LiJeL3H9emAb0A60RcT4Sm26h2xm+dLeVn0prw24LCI+CJwIXCRpLLAEODYijgN+DXy5zD0mR8S4apIxuIdsZjkTUajRfWIDsCHb3iZpFTA8IhYXnfYkULMHIu4hm1m+FApVF0lNkpYVlaZSt5R0BHAC8FSnQ58HHuoikgAWS3qmq/t25h6ymeVLN3rIEdEMNJc7R9Ig4B7g0ojYWlR/FR3DGnd2cenEiGiVNARYIun5iHi0XFtOyGaWLzV6qAcgqT8dyfjOiLi3qH4WcCZwanTxhbaIaM1+bpK0AJgAlE3IHrIws3yJQvWlDEkC5gCrIuL6ovqpwOXA2RGxo4trB0o6YNc2MAVYWSl095DNLFei8uyJak0EzgN+KWlFVncl8F1gPzqGIQCejIgLJQ0DbomIacBQYEF2vB9wV0QsqtSgE7KZ5UuhZrMsHgdKvcm3sIvzW4Fp2fY64PjutumEbGb5UqNpb/XghGxm+VLDh3q9zQnZzPLFPWQzs0TU7qFer3NCNrN8qdFDvXpwQjazXInwGLKZWRo8hmxmlggPWZiZJcI9ZDOzRLS/Xe8IeswJ2czyxUMWZmaJ8JCFmVki3EM2M0uEE7KZWRrCD/XMzBLRwGPIXsLJzPKlG6tOlyNppKRHJK2S9JykS7L6gyUtkbQ6+3lQF9dPlfSCpDWSrqgmdCdkM8uXGq2pR8eK0pdFxAeBE4GLJI0FrgCWRsQYYGm2/w6S+gI3AacDY4GZ2bVlOSGbWb7UqIccERsiYnm2vQ1YBQwHpgO3ZafdBpxT4vIJwJqIWBcRbwHzs+vKckI2s3zpRg9ZUpOkZUWlqdQtJR0BnAA8BQyNiA3QkbSBISUuGQ68VLTfktWV5Yd6ZpYvbdV/oD4imoHmcudIGgTcA1waEVuzlaQrKXVSVLrICdnM8qWGsywk9acjGd8ZEfdm1RslHR4RGyQdDmwqcWkLMLJofwTQWqk9D1mYWb7UbpaFgDnAqoi4vujQ/cCsbHsWcF+Jy58GxkgaLWkAMCO7riwnZDPLl9rNspgInAecImlFVqYB1wCnSVoNnJbtI2mYpIUAEdEGXAw8TMfDwLsj4rlKDXrIwszypUavTkfE45QeCwY4tcT5rcC0ov2FwMLutOmEbGb50sBv6jkhm1m+dGOWRWqckM0sX6Li7LJkOSGbWb7485tmZolwQjYzS4Qf6pmZJaK9vd4R9JgTspnli4cszMwS4YRsZpYIjyGbmaUhCp6HbGaWBg9ZmJklwrMszMwS4R6ymVkinJCtsw0bX+HKb1zL5i2v0Ufi3Omnc94nz+HG5tv578efoI/6cPBBv8e3rrqMIYceUu9wrQ4G7DeA+Q/cwoABA+jbry+LHljKDf98c73DanwN/HEhxV4O/u3N6xr3v84eeGXzFl55dQtjj/oDtm/fwSfP/yLf/fY/MXTIYAYNHAjAHT+6j7W/+S1f+Ye/qXO0ve/oo8+tdwhJ2H/ge9mxfSf9+vXjhw/O4RtXXsuKZ35Z77DqZu3m5VWtIFrOjuv/quqcs//ffr9se5LmAmcCmyLi2Kzuh8BR2SkHAq9HxLgS164HtgHtQFtEjK8UT8UesqSjgel0LGEddCzUd39ErKp07b7s0MEHc+jggwEYOHB/3j9qJBtfeZUjR4/afc7Onf9HdQvYWl7t2L4TgH79+9Gvfz/2dgdpn1DbaW+3ArOB23dVRMSf79qWdB3wRpnrJ0fE5mobK5uQJV0OzATmAz/PqkcA8yTNj4hrqm1oX/byho2sWr2W447p+KN6w7/fyv2LlnLAwIHMvdH/Cfdlffr04b6ldzJq9EjumHs3zy5fWe+QGl8NZ1lExKOSjih1LFsE9ZPAKbVqr9Iip+cDH46IayLijqxcA0zIjpUkqUnSMknLbrl9Xq1ibUg7duzkS1d9k8u/eMHuoYpLLvgsSxf8gDOmTOauex6oc4RWT4VCgbMmz2TicVM5/kPH8IGjj6x3SA0vCoWqS3GuykpTN5r6GLAxIlZ3FQqwWNIz1d63UkIuAMNK1B+eHSsdRURzRIyPiPF/+ZmZ1cSRS2+3tXHpVd/kjCmTOW3SxHcdP2PKJP7rpz+rQ2SWmm1b3+TJnz3Dyad+tN6hNL5CVF2Kc1VWmrvR0kygXI9zYkR8CDgduEjSyZVuWCkhXwoslfSQpOasLAKWApdUGfQ+KSK4+tv/yvtHjWTWjE/srn/xpZd3bz/y2JOMHjWiHuFZAg4+5EAOeN8gAPZ7z35MPPkjrF29vr5B5UEUqi89JKkf8Angh12G0bEKNRGxCVhAx8hCWWXHkCNikaQPZDcaTseS2C3A0xHRuK/D9IL//cVzPLBoKWOOPII/m3URAJdcMIt7f7KY9b9tQX3EsMOGcPXf73szLKzDoUMP5Tuzv0bfvn3p00c8eN8SHln8WL3Dany98y2LjwPPR0RLqYOSBgJ9ImJbtj0F+Hqlm1acZRERBeDJbga7z/vQ8cey8mcPvav+5I9W/CNp+4gXfrWas0/5VL3DyJ+22vUVJc0DJgGDJbUAX4mIOcAMOg1XSBoG3BIR04ChwIKO5370A+6KiEWV2vOLIWaWLzX8/GZElHwIFhGfLVHXCkzLttcBx3e3PSdkM8sXf37TzCwN4W9ZmJklwj1kM7NEOCGbmSXCH6g3M0uD19QzM0uFE7KZWSI8y8LMLBHuIZuZJcIJ2cwsDdHuIQszszS4h2xmlgZPezMzS4UTsplZIhp3CLniEk5mZg0l2gpVl0okzZW0SdLKorqvSnpZ0oqsTOvi2qmSXpC0RtIV1cTuhGxm+VLoRqnsVmBqifp/iYhxWVnY+aCkvsBNdCxwOhaYKWlspcackM0sV6IQVZeK94p4FNjSgzAmAGsiYl1EvAXMB6ZXusgJ2czypRs9ZElNkpYVlaYqW7lY0i+yIY2DShwfDrxUtN+S1ZXlhGxmudKdHnJENEfE+KLSXEUT3wOOBMYBG4DrSpyjUqFVurFnWZhZvuzlWRYRsXHXtqTvAz8pcVoLMLJofwTQWune7iGbWa5EW/WlJyQdXrT7p8DKEqc9DYyRNFrSAGAGcH+le7uHbGa5EjXsIUuaB0wCBktqAb4CTJI0jo4hiPXABdm5w4BbImJaRLRJuhh4GOgLzI2I5yq154RsZvlSw4QcETNLVM/p4txWYFrR/kLgXVPiynFCNrNcqWUPubc5IZtZrjghm5klItpLzThrDE7IZpYr7iGbmSUiCu4hm5klwT1kM7NERLiHbGaWBPeQzcwSUfAsCzOzNPihnplZIpyQzcwSEY276LQTspnli3vIZmaJ8LQ3M7NEtHuWhZlZGtxDNjNLRC3HkCXNBc4ENkXEsVndd4CzgLeAtcDnIuL1EteuB7YB7UBbRIyv1J7X1DOzXImovlThVmBqp7olwLERcRzwa+DLZa6fHBHjqknG4IRsZjkTBVVdKt4r4lFgS6e6xRG7l0h9ko4VpWvCCdnMcqW90KfqIqlJ0rKi0tTN5j4PPNTFsQAWS3qm2vt6DNnMcqU7L4ZERDPQ3JN2JF0FtAF3dnHKxIholTQEWCLp+azH3SX3kM0sVwqhqktPSZpFx8O+T0eU/hOQrUJNRGwCFgATKt3XCdnMciVCVZeekDQVuBw4OyJ2dHHOQEkH7NoGpgArK93bCdnMcqWWsywkzQOeAI6S1CLpfGA2cAAdwxArJN2cnTtM0sLs0qHA45KeBX4OPBgRiyq1t9fHkN877GN7uwlrQL868g/rHYLl1J4MRXQWETNLVM/p4txWYFq2vQ44vrvt+aGemeVKe6Fx/8ffCdnMcqWBv77phGxm+VLLIYve5oRsZrnijwuZmSWigReddkI2s3wJ3EM2M0tCm4cszMzS4B6ymVkiPIZsZpYI95DNzBLhHrKZWSLa3UM2M0tDDdc47XVOyGaWKwX3kM3M0uCPC5mZJaKRH+o17odDzcxKKEhVl0okzZW0SdLKorqDJS2RtDr7eVAX106V9IKkNZKuqCZ2J2Qzy5X2bpQq3ApM7VR3BbA0IsYAS7P9d5DUF7gJOB0YC8yUNLZSY07IZpYrBVVfKomIR4EtnaqnA7dl27cB55S4dAKwJiLWRcRbwPzsurKckM0sVwqo6iKpSdKyotJURRNDI2IDQPZzSIlzhgMvFe23ZHVl+aGemeVKd2ZZREQz0LwXwijV/64YmhOymeVKL7wYslHS4RGxQdLhwKYS57QAI4v2RwCtlW7sIQszy5VCN0oP3Q/MyrZnAfeVOOdpYIyk0ZIGADOy68pyQjazXGlX9aUSSfOAJ4CjJLVIOh+4BjhN0mrgtGwfScMkLQSIiDbgYuBhYBVwd0Q8V6k9D1mYWa7U8sWQiJjZxaFTS5zbCkwr2l8ILOxOe07IZpYrjfymnhOymeVKAy+p54RsZvniHrKZWSKqfCU6SU7IZpYr/kC9mVkiPGRhZpYIJ2Qzs0R4xRAzs0R4DNnMLBGeZWFmlohCAw9aOCGbWa74oZ6ZWSIat3/shGxmOeMesplZItrUuH1kf6DezHIlulHKkXSUpBVFZaukSzudM0nSG0XnXL0nsbuHbGa5Uqshi4h4ARgHIKkv8DKwoMSpj0XEmbVo0wnZzHJlL017OxVYGxEv7o2b7+IhCzPLlVoNWXQyA5jXxbGTJD0r6SFJx/Qs6g5OyGaWK91ZdVpSk6RlRaWp8/2yVaPPBn5UornlwKiIOB64EfjxnsTuIQszy5X2bvR9I6IZaK5w2unA8ojYWOL6rUXbCyX9m6TBEbG56iCKuIdsZrnSnR5ylWbSxXCFpMMkKdueQEdOfbWnsbuHbGa5EjV8qCdpf+A04IKiugsBIuJm4FzgC5LagJ3AjIjocQBOyGaWK7V8Uy8idgCHdKq7uWh7NjC7Vu05IfeC7zdfxxnTPs6mVzYz7oRT6x2O1dHQb36JgZM+QvuW13nx7AsBOOSLn2HQKScRhQLtW17nd1++jvZXttQ50sbVyF978xhyL7j99rs548xP1zsMS8DWHy/h5aZ/fEfda3P+kxfP+QK//cRFbP/pzznkr/27sif20rS3XuGE3Asee/wptrz2er3DsATsXLaS9te3vaOusH3H7m299z2kmSoaRxtRdUmNhyzMEnDIJbN43/SPU3hzOy2zLq93OA2tlg/1eluPe8iSPlfm2O7J1oXC9p42YbbPePWG2/jNKeex9YFHOPDTZ9U7nIa2F6a99Zo9GbL4WlcHIqI5IsZHxPg+fQbuQRNm+5ZtDz7CoCl/VO8wGlp0419qyg5ZSPpFV4eAobUPx2zf03/UMN5+sRWAQZNP5K11L9U5osaWYs+3WpXGkIcCfwK81qlewP/slYhy6I4f3MQfn3wSgwcfzPp1y/ja16/lP26dX++wrA4Ou/YK9p9wHH0PfB+jH/kBr86+g4Enf5gBo0dAIXi7dSObvnpjvcNsaO09fy+j7iol5J8AgyJiRecDkn66NwLKo78476J6h2CJ+N3fXfOuuq33PFyHSPKrkechl03IEXF+mWOfqn04ZmZ7JsWx4Wp52puZ5Uqex5DNzBpKbocszMwajYcszMwSkedZFmZmDcVDFmZmifBDPTOzRNR4xZD1wDagHWiLiPGdjgu4AZgG7AA+GxHLe9qeE7KZ5cpeGLKYXGbR0tOBMVn5CPC97GePOCGbWa7swZJ2PTEduD1bR+9JSQdKOjwiNvTkZv5AvZnlSjtRdSn+VHBWmjrdLoDFkp4pcQxgOFD8NaiWrK5H3EM2s1zpzpBFRDQDzWVOmRgRrZKGAEskPR8RjxYdV6nbVh1AJ+4hm1muRETVpYp7tWY/NwELgAmdTmkBRhbtjwBaexq7E7KZ5UqBqLqUI2mgpAN2bQNTgJWdTrsf+Iw6nAi80dPxY/CQhZnlTA2nvQ0FFnTMbKMfcFdELJJ0IUBE3AwspGPK2xo6pr11ubRdNZyQzSxXavXqdESsA44vUX9z0XYANfvguROymeWKX502M0uEE7KZWSJ6+cWQmnJCNrNccQ/ZzCwR/kC9mVki2qNxP8DphGxmueIxZDOzRHgM2cwsER5DNjNLRMFDFmZmaXAP2cwsEZ5lYWaWCA9ZmJklwkMWZmaJcA/ZzCwRjdxD9hJOZpYr7dFedSlH0khJj0haJek5SZeUOGeSpDckrcjK1XsSu3vIZpYrNXx1ug24LCKWZ2vrPSNpSUT8qtN5j0XEmbVo0AnZzHKlVq9OZ4uVbsi2t0laBQwHOifkmvGQhZnlSkRUXSQ1SVpWVJpK3VPSEcAJwFMlDp8k6VlJD0k6Zk9idw/ZzHKlO7MsIqIZaC53jqRBwD3ApRGxtdPh5cCoiHhT0jTgx8CYbgVcxD1kM8uV6Ma/SiT1pyMZ3xkR976rrYitEfFmtr0Q6C9pcE9jdw/ZzHKlVq9OSxIwB1gVEdd3cc5hwMaICEkT6OjkvtrTNp2QzSxXajjLYiJwHvBLSSuyuiuB38/auRk4F/iCpDZgJzAj9iAAJ2Qzy5VavakXEY8DqnDObGB2TRrECdnMcsZLOJmZJcJLOJmZJcI9ZDOzRPgD9WZmifDnN83MEuEhCzOzRDTy95CdkM0sV9xDNjNLRCOPIauR/5o0GklN2delzHbz74Xt4q+99a6S31q1fZ5/LwxwQjYzS4YTsplZIpyQe5fHCa0U/14Y4Id6ZmbJcA/ZzCwRTshmZolwQu4lkqZKekHSGklX1Dseqz9JcyVtkrSy3rFYGpyQe4GkvsBNwOnAWGCmpLH1jcoScCswtd5BWDqckHvHBGBNRKyLiLeA+cD0OsdkdRYRjwJb6h2HpcMJuXcMB14q2m/J6szMdnNC7h2lVq71fEMzewcn5N7RAows2h8BtNYpFjNLlBNy73gaGCNptKQBwAzg/jrHZGaJcULuBRHRBlwMPAysAu6OiOfqG5XVm6R5wBPAUZJaJJ1f75isvvzqtJlZItxDNjNLhBOymVkinJDNzBLhhGxmlggnZDOzRDghm5klwgnZzCwR/w9+Dk5l9wBOoAAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "cm= confusion_matrix(ytest, model3.predict(xtest)) \n",
    "sns.heatmap(cm, annot=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "4 out of 40 are predicted wrong using RandomForestClassifier "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### SUPPORT VECTOR MACHINE ALGORITHM"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SVC(kernel='linear', random_state=0)"
      ]
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model4 = SVC(kernel = 'linear', random_state = 0)\n",
    "model4.fit(xtrain, ytrain)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model : SVM \n",
      "Accuracy : 0.93\n",
      "Recall_Score : 0.79\n",
      "precission_Score : 1.00\n"
     ]
    }
   ],
   "source": [
    "score4 = accuracy_score(ytest, model4.predict(xtest))\n",
    "print(\"Model : SVM \")\n",
    "print('Accuracy : {:0.2f}'.format(score4))\n",
    "model_list.append('SVM')\n",
    "score_list.append(score4)\n",
    "print('Recall_Score : {:0.2f}'.format(recall_score(ytest, model4.predict(xtest))))\n",
    "print('precission_Score : {:0.2f}'.format(precision_score(ytest, model4.predict(xtest))))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 97,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "cm= confusion_matrix(ytest, model4.predict(xtest)) \n",
    "sns.heatmap(cm, annot=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "3 out of 40 are predicted wrong using SVM"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### K-NN CLASSIFIER"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "KNeighborsClassifier()"
      ]
     },
     "execution_count": 98,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model5= KNeighborsClassifier(n_neighbors=5, metric='minkowski', p=2 )  \n",
    "model5.fit(xtrain, ytrain)  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model : K-NN\n",
      "Accuracy : 0.88\n",
      "Recall_Score : 0.86\n",
      "precission_Score : 0.80\n"
     ]
    }
   ],
   "source": [
    "score5 = accuracy_score(ytest, model5.predict(xtest))\n",
    "print(\"Model : K-NN\")\n",
    "print('Accuracy : {:0.2f}'.format(score5))\n",
    "model_list.append('K-NN')\n",
    "score_list.append(score5)\n",
    "print('Recall_Score : {:0.2f}'.format(recall_score(ytest, model5.predict(xtest))))\n",
    "print('precission_Score : {:0.2f}'.format(precision_score(ytest, model5.predict(xtest))))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 100,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "cm= confusion_matrix(ytest, model5.predict(xtest)) \n",
    "sns.heatmap(cm, annot=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "5 out of 40 are predicted wrong using K-NN algorithm"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### NAIVE BAYES"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GaussianNB()"
      ]
     },
     "execution_count": 101,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model6 = GaussianNB()  \n",
    "model6.fit(xtrain, ytrain)  \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model : Naive bayes\n",
      "Accuracy : 0.95\n",
      "Recall_Score : 1.00\n",
      "precission_Score : 0.88\n"
     ]
    }
   ],
   "source": [
    "score6 = accuracy_score(ytest, model6.predict(xtest))\n",
    "print(\"Model : Naive bayes\")\n",
    "print('Accuracy : {:0.2f}'.format(score6))\n",
    "model_list.append('Naive-Bayes')\n",
    "score_list.append(score6)\n",
    "print('Recall_Score : {:0.2f}'.format(recall_score(ytest, model6.predict(xtest))))\n",
    "print('precission_Score : {:0.2f}'.format(precision_score(ytest, model6.predict(xtest))))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 103,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "cm= confusion_matrix(ytest, model6.predict(xtest)) \n",
    "sns.heatmap(cm, annot=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Only 2 out of 40 are predicted wrong using Naive Bayes algorithm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 104,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 936x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(13, 5))\n",
    "sns.lineplot(model_list, score_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.925, 0.85, 0.9, 0.925, 0.875, 0.95]"
      ]
     },
     "execution_count": 105,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "score_list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Logistic_Regression',\n",
       " 'DecisionTreeClassifier',\n",
       " 'RandomForestClassifier',\n",
       " 'SVM',\n",
       " 'K-NN',\n",
       " 'Naive-Bayes']"
      ]
     },
     "execution_count": 106,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 107,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(15, 5))\n",
    "sns.barplot(model_list, score_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Age</th>\n",
       "      <th>EstimatedSalary</th>\n",
       "      <th>Purchased</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>19</td>\n",
       "      <td>19000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>35</td>\n",
       "      <td>20000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>26</td>\n",
       "      <td>43000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>27</td>\n",
       "      <td>57000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>19</td>\n",
       "      <td>76000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>395</th>\n",
       "      <td>46</td>\n",
       "      <td>41000</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>396</th>\n",
       "      <td>51</td>\n",
       "      <td>23000</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>397</th>\n",
       "      <td>50</td>\n",
       "      <td>20000</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>398</th>\n",
       "      <td>36</td>\n",
       "      <td>33000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>399</th>\n",
       "      <td>49</td>\n",
       "      <td>36000</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>400 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Age  EstimatedSalary  Purchased\n",
       "0     19            19000          0\n",
       "1     35            20000          0\n",
       "2     26            43000          0\n",
       "3     27            57000          0\n",
       "4     19            76000          0\n",
       "..   ...              ...        ...\n",
       "395   46            41000          1\n",
       "396   51            23000          1\n",
       "397   50            20000          1\n",
       "398   36            33000          0\n",
       "399   49            36000          1\n",
       "\n",
       "[400 rows x 3 columns]"
      ]
     },
     "execution_count": 108,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can see that Naive Bayes algorithm gives us the best accuracy for this data set."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's create a Graphical User Interface for taking inputs and predicting outputs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {},
   "outputs": [],
   "source": [
    "from tkinter import *\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "\n",
    "root = Tk()\n",
    "\n",
    "age = StringVar()\n",
    "age_label = Label(root,text=\"Enter Age \").grid(row=0,column=0,padx=40,pady=20)\n",
    "age_input = Entry(root,textvariable=age)\n",
    "age_input.grid(row=0,column=1,padx=40,pady=20)\n",
    "\n",
    "salary = StringVar()\n",
    "salary_label = Label(root,text=\"Estimated Salary \").grid(row=1,column=0,padx=40,pady=20)\n",
    "salary_input = Entry(root,textvariable=salary)\n",
    "salary_input.grid(row=1,column=1,padx=40,pady=20)\n",
    "\n",
    "\n",
    "def Onsubmit():\n",
    "    global values\n",
    "    values=[]\n",
    "    \n",
    "    Age = float(age.get())\n",
    "    values.append(Age)\n",
    "    age_input.delete(0,'end')\n",
    "    \n",
    "    Salary = float(salary.get())\n",
    "    values.append(Salary)\n",
    "    salary_input.delete(0,'end')\n",
    "    \n",
    "    \n",
    "    arr = np.array(values).reshape(1,2)\n",
    "\n",
    "    \n",
    "    \n",
    "    newarr = scaler.transform(arr)\n",
    "    result=model5.predict((newarr))\n",
    "    Label(root,text=\"The probability of above person buying the product is \"+str(result),font=(\"Arial\",20)).grid(row=8,column=0,columnspan=2,padx=40,pady=20)\n",
    "\n",
    "   \n",
    "\n",
    "    \n",
    "sub_button = Button(root,text =\"Submit\",command=Onsubmit).grid(row=7,columnspan=2,padx=40,pady=20)\n",
    "\n",
    "root.mainloop()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Conclusion\n",
    "1. Naive - Bayes classifier is performing very well.\n",
    "2. Even if we enter age and income out of the range of dataset, results seems to be meaningful.\n",
    "3. This model gives many firms a brief idea to target on which group of audience.\n",
    "   "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
